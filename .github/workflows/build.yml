# Builds LWJGL and runs tests.
# No artifacts are uploaded, see LWJGL-CI/lwjgl3 for that.
name: LWJGL Build

on: [push]

env:
  JAVA_HOME: jdk8
  ANT_OPTS: -Xmx1G
  LWJGL_BUILD_TYPE: nightly

jobs:
  cache-kotlinc:
    name: Compile templates and cache kotlinc output
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Download JDK
        run: |
          mkdir jdk8
          curl https://cdn.azul.com/zulu/bin/zulu8.72.0.17-ca-jdk8.0.382-linux_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Compile templates
        run: |
          git clone https://github.com/LWJGL-CI/OculusSDK.git ../OculusSDK
          ANT_OPTS=-Xmx4G ant -emacs compile-templates -Dbackend-threads=0
      - name: Cache kotlinc output
        uses: actions/cache/save@v3
        with:
          path: |
            bin/classes/generator
            bin/classes/templates
          key: cache-kotlinc-${{ github.sha }}
          enableCrossOsArchive: true

  linux-cross:
    name: Linux Cross
    needs: cache-kotlinc
    runs-on: ubuntu-latest
    container:
      image: ${{matrix.CONTAINER}}
    strategy:
      fail-fast: false
      matrix:
        ARCH: [arm64, riscv64]
        include:
          - ARCH: arm64
            CONTAINER: ubuntu:18.04
            PACKAGES: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
            CROSS_ARCH: arm64
            CROSS_PACKAGES: libgtk-3-dev:arm64 libatk-bridge2.0-dev:arm64 libgdk-pixbuf2.0-dev:arm64 libglu-dev:arm64 libgl1-mesa-glx:arm64 libx11-dev:arm64 libxt-dev:arm64 libdbus-1-dev:arm64
            NATIVE_PARAMS: -Dgcc.libpath.opengl=/usr/lib/aarch64-linux-gnu/mesa
          - ARCH: riscv64
            CONTAINER: ubuntu:20.04
            PACKAGES: gcc-riscv64-linux-gnu g++-riscv64-linux-gnu libc6-dev-riscv64-cross
            CROSS_ARCH: riscv64
            CROSS_PACKAGES: libgtk-3-dev:riscv64 libatk-bridge2.0-dev:riscv64 libgdk-pixbuf2.0-dev:riscv64 libglu-dev:riscv64 libgl1-mesa-glx:riscv64 libx11-dev:riscv64 libxt-dev:riscv64 libdbus-1-dev:riscv64
            NATIVE_PARAMS: -Dgcc.libpath.opengl=/usr/lib/riscv64-linux-gnu/mesa
    env:
      LWJGL_BUILD_ARCH: ${{matrix.ARCH}}
    steps:
      - name: Upgrade git
        run: |
          apt-get -y update
          apt-get -y install software-properties-common
          apt-get -y install --reinstall ca-certificates
          apt-get -y update
          apt-get -y upgrade
          add-apt-repository -y ppa:git-core/ppa
        if: ${{ matrix.CONTAINER == 'ubuntu:18.04' }}
      - run: |
          apt-get -y update
          apt-get install -y git
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Install dependencies
        run: |
          git config --global --add safe.directory $(pwd)
          DEBIAN_FRONTEND=noninteractive apt-get -yq install ant awscli curl zstd ${{matrix.PACKAGES}}
          mkdir jdk8
          curl -L https://cdn.azul.com/zulu/bin/zulu8.72.0.17-ca-fx-jdk8.0.382-linux_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Prepare cross-compilation
        run: |
          sed -i 's/deb http/deb [arch=amd64,i386] http/' /etc/apt/sources.list
          grep "ubuntu.com/ubuntu" /etc/apt/sources.list | tee /etc/apt/sources.list.d/ports.list
          sed -i 's/amd64,i386/${{matrix.CROSS_ARCH}}/' /etc/apt/sources.list.d/ports.list
          sed -i 's#http://.*/ubuntu#http://ports.ubuntu.com/ubuntu-ports#' /etc/apt/sources.list.d/ports.list
          dpkg --add-architecture ${{matrix.CROSS_ARCH}}
          apt-get clean
          apt-get update || true
      - name: Install cross-compilation dependencies
        run: apt-get -yq -f --allow-unauthenticated --no-install-suggests --no-install-recommends install ${{matrix.CROSS_PACKAGES}} -o Dpkg::Options::="--force-overwrite"
      - name: Fix dbus
        run: cp /usr/lib/riscv64-linux-gnu/dbus-1.0/include/dbus/dbus-arch-deps.h /usr/include/dbus-1.0/dbus/
        if: ${{ matrix.ARCH == 'riscv64' }}
      - name: Restore kotlinc output
        uses: actions/cache/restore@v3
        with:
          path: |
            bin/classes/generator
            bin/classes/templates
          key: cache-kotlinc-${{ github.sha }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - name: Generate bindings
        run: ant -emacs clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Build native
        run: ant -emacs compile-native ${{matrix.NATIVE_PARAMS}}
